#!/bin/bash

# üöÄ SCRIPT CORRETOR AUTOM√ÅTICO RAILWAY - CIRURGI√ÉO DEV
# VAI LIMPAR TUDO E DEIXAR APENAS O NECESS√ÅRIO FUNCIONANDO

echo "üî• INICIANDO CORRE√á√ÉO AUTOM√ÅTICA DO RAILWAY..."

# 1. Fazer login no Railway
echo "üîë Fazendo login no Railway..."
railway login

# 2. Conectar ao projeto
echo "üìã Conectando ao projeto LucrativaBet..."
railway connect f105f2bb-9841-4d3c-8a57-dcca197f5ca7

# 3. Listar servi√ßos atuais
echo "üìä Listando servi√ßos atuais..."
railway run -- rails --version 2>/dev/null || echo "Verificando servi√ßos..."

# 4. Identificar e deletar servi√ßos desnecess√°rios
echo "üßπ Limpando servi√ßos conflitantes..."

# Deletar servi√ßos GitHub antigos (se existirem)
echo "‚ùå Deletando servi√ßos GitHub antigos..."
railway services:list | grep -i github | awk '{print $1}' | xargs -I {} railway service delete {} --force 2>/dev/null || echo "Nenhum servi√ßo GitHub encontrado"

# Deletar Postgres duplicado (deixar apenas 1)
echo "üóÑÔ∏è Verificando Postgres duplicados..."
POSTGRES_COUNT=$(railway services:list | grep -c postgres)
if [ $POSTGRES_COUNT -gt 1 ]; then
    echo "Encontrados $POSTGRES_COUNT Postgres, deletando duplicados..."
    # Manter o primeiro Postgres, deletar os outros
    railway services:list | grep postgres | tail -n +2 | awk '{print $1}' | xargs -I {} railway service delete {} --force
fi

# 5. Identificar servi√ßo correto (upload de 627MB)
echo "üéØ Identificando servi√ßo principal..."
CORRECT_SERVICE=$(railway services:list | grep -E "(laravel|app|main)" | head -1 | awk '{print $1}')

if [ -n "$CORRECT_SERVICE" ]; then
    echo "‚úÖ Servi√ßo principal encontrado: $CORRECT_SERVICE"
    
    # 6. Configurar vari√°veis de ambiente corretas
    echo "‚öôÔ∏è Configurando vari√°veis de ambiente..."
    
    # Obter credenciais do Postgres correto
    POSTGRES_SERVICE=$(railway services:list | grep postgres | head -1 | awk '{print $1}')
    
    railway variables:set APP_NAME=LucrativaBet --service $CORRECT_SERVICE
    railway variables:set APP_ENV=production --service $CORRECT_SERVICE  
    railway variables:set APP_DEBUG=false --service $CORRECT_SERVICE
    railway variables:set APP_KEY=base64:jP1f2K0S7Xe5JkyxyP8EptDNe8w77mGYOWcEoZyH9FU= --service $CORRECT_SERVICE
    railway variables:set DB_CONNECTION=pgsql --service $CORRECT_SERVICE
    railway variables:set DB_HOST=$POSTGRES_SERVICE.railway.internal --service $CORRECT_SERVICE
    railway variables:set DB_PORT=5432 --service $CORRECT_SERVICE
    railway variables:set DB_DATABASE=railway --service $CORRECT_SERVICE
    railway variables:set DB_USERNAME=postgres --service $CORRECT_SERVICE
    railway variables:set CACHE_DRIVER=redis --service $CORRECT_SERVICE
    railway variables:set QUEUE_CONNECTION=redis --service $CORRECT_SERVICE
    railway variables:set SESSION_DRIVER=redis --service $CORRECT_SERVICE
    
    # Obter Redis service
    REDIS_SERVICE=$(railway services:list | grep redis | head -1 | awk '{print $1}')
    railway variables:set REDIS_HOST=$REDIS_SERVICE.railway.internal --service $CORRECT_SERVICE
    
    # 7. Configurar build e start commands
    echo "üîß Configurando comandos de deploy..."
    railway variables:set RAILWAY_BUILD_COMMAND="composer install --no-dev --optimize-autoloader && npm install && npm run build" --service $CORRECT_SERVICE
    railway variables:set RAILWAY_START_COMMAND="php artisan config:cache && php artisan route:cache && php artisan view:cache && php artisan migrate --force && php artisan serve --host=0.0.0.0 --port=\$PORT" --service $CORRECT_SERVICE
    
    # 8. Reiniciar servi√ßo
    echo "üîÑ Reiniciando servi√ßo principal..."
    railway service restart $CORRECT_SERVICE
    
    echo "‚úÖ CORRE√á√ÉO CONCLU√çDA!"
    echo "üåê Seu cassino estar√° dispon√≠vel em:"
    railway domain --service $CORRECT_SERVICE
    
else
    echo "‚ùå Servi√ßo principal n√£o encontrado. Verifique manualmente."
fi

echo "üéØ PROCESSO AUTOM√ÅTICO CONCLU√çDO!"
echo "üìä STATUS FINAL:"
railway services:list